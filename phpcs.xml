<?xml version="1.0"?>
<ruleset
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="./vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<!-- We only care about php files, not js/css -->
	<arg name="extensions" value="php" />

	<!-- Needed for phpcs, but really it should be up to the dev -->
	<arg name="tab-width" value="4" />

	<!-- Print out the name of the failed rule -->
	<arg value="s" />

	<!-- Print out the progress while it's scanning -->
	<arg value="p" />

	<!-- Make the output pretty -->
	<arg name="colors" />

	<!-- Lint everything please -->
	<file>./</file>

	<!-- Except these. See phpunit.xml's ignores -->
	<exclude-pattern>vendor/</exclude-pattern>
	<exclude-pattern>storage/</exclude-pattern>
	<exclude-pattern>bootstrap/cache/</exclude-pattern>
	<exclude-pattern>*.blade.php</exclude-pattern>

	<!-- Activate rules. Note this has to come before configuring them below -->
	<rule ref="Generic">
		<!-- There's a lot of contradictory rules, so we'll have to ignore a lot -->

		<!-- We want short (conflicts with DisallowLongArraySyntax) -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />

		<!-- While we'd like to format doc comments, we want to support single line type hints -->
		<!-- /** @var Type $foo */ -->
		<exclude name="Generic.Commenting.DocComment" />

		<!-- While evaluating a function every loop isn't the best, readability is king -->
		<exclude name="Generic.CodeAnalysis.ForLoopWithTestFunctionCall.NotAllowed" />

		<!-- We want classes opening brace to be on the next line -->
		<exclude name="Generic.Classes.OpeningBraceSameLine" />

		<!-- We want a newline at the end (conflicts with EndFileNewline) -->
		<exclude name="Generic.Files.EndFileNoNewline" />

		<!-- Files shouldn't be lowercased, they should be PascalCase -->
		<exclude name="Generic.Files.LowercasedFilename" />

		<!-- We don't want assignment aligned -->
		<exclude name="Generic.Formatting.MultipleStatementAlignment" />

		<!-- We do want spaces after casts (conflicts with SpaceAfterCast) -->
		<exclude name="Generic.Formatting.NoSpaceAfterCast" />

		<!-- We don't care about prefixing abstract classes with Abstract -->
		<exclude name="Generic.NamingConventions.AbstractClassNamePrefix" />

		<!-- We don't care about suffixing traits with Trait -->
		<exclude name="Generic.NamingConventions.TraitNameSuffix" />

		<!-- We don't want camel caps function names -->
		<exclude name="Generic.NamingConventions.CamelCapsFunctionName.ScopeNotCamelCaps" />

		<!-- In fact, you do NOT want to close the php tag -->
		<exclude name="Generic.PHP.ClosingPHPTag" />

		<!-- We want lowercase true/false/null (conflicts with LowerCaseConstant) -->
		<exclude name="Generic.PHP.UpperCaseConstant" />

		<!-- If strings have to be broken up over multiple lines, then allow it-->
		<exclude name="Generic.Strings.UnnecessaryStringConcat.Found" />

		<!-- Tabs are better than spaces (conflicts with DisallowSpaceIndent) -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent" />
	</rule>

	<!-- Now PEAR's rules -->
	<rule ref="PEAR">
		<!-- At first, I tried to fill in all the missing phpdocs, but I found pretty quickly -->
		<!-- that it was leading to redundent commenting that wasn't helping, so don't require it -->
		<exclude name="PEAR.Commenting.ClassComment.Missing" />
		<exclude name="PEAR.Commenting.FileComment" />
		<exclude name="PEAR.Commenting.FunctionComment.Missing" />
		<exclude name="PEAR.Commenting.FunctionComment.MissingParamTag" />
		<exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />

		<!-- We don't care about specifying @category/@package/@author/@license/@link -->
		<exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingLinkTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingPackageTag" />

		<!-- Parameters should be self commenting -->
		<exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />

		<!-- We don't want to align parameter comments -->
		<exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamType" />

		<!-- We prefer using `require` (errors) instead of `include` (warns) -->
		<exclude name="PEAR.Files.IncludingFile.UseInclude" />
		<exclude name="PEAR.Files.IncludingFile.UseIncludeOnce" />

		<!-- Bad for closures, we don't want the parentheses to start/end the line or require odd indentation -->
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent" />

		<!-- Bad for multiline params, we don't care if { is on the same line as ) -->
		<exclude name="PEAR.Functions.FunctionDeclaration.NewlineBeforeOpenBrace" />

		<!-- Privates shouldn't start with an underscore -->
		<exclude name="PEAR.NamingConventions.ValidVariableName.PrivateNoUnderscore" />
		<exclude name="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore" />

		<!-- The same as Generic.Sniffs.WhiteSpace.ScopeIndentSniff, but doesn't indent switch cases -->
		<exclude name="PEAR.WhiteSpace.ScopeIndent.IncorrectExact" />
	</rule>

	<rule ref="PSR1" />

	<rule ref="PSR2">
		<!-- We prefer `else if` over `elseif` -->
		<exclude name="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed" />

		<!-- A copy of this rule is in PEAR that we are ignoring -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace" />
	</rule>

	<!-- And we want to configure some rules (but they can't be in the same rule blocks above) -->

	<!-- We want tabs, not spaces -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<!-- Although we prefer this to be exact, it can't handle mutiline sadly -->
			<property name="exact" value="false" />
			<property name="tabIndent" value="true" />
		</properties>
	</rule>

	<!-- LineLengths are too strict -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="160" />
			<property name="ignoreComments" value="true" />
			<property name="absoluteLineLimit" value="160" />
		</properties>
	</rule>

	<!-- We want no spaces after not's like !$someBool -->
	<rule ref="Generic.Formatting.SpaceAfterNot">
		<properties>
			<property name="spacing" value="0" />
		</properties>
	</rule>

	<!-- We want Closures to have same line brace, methods next line -->
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkFunctions" value="false" />
			<property name="checkClosures" value="true" />
		</properties>
	</rule>

	<!-- Migrations use a custom naming scheme for their file, so don't require a namespace -->
	<rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
		<exclude-pattern>database/migrations/</exclude-pattern>
	</rule>

	<!--
	<rule ref="PSR12"/> -->
</ruleset>
