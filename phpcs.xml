<?xml version="1.0"?>
<ruleset
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="./vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<!-- We only care about php files, not js/css -->
	<arg name="extensions" value="php" />

	<!-- Needed for phpcs, but really it should be up to the dev -->
	<arg name="tab-width" value="4" />

	<!-- Print out the name of the failed rule -->
	<arg value="s" />

	<!-- Print out the progress while it's scanning -->
	<arg value="p" />

	<!-- Make the output pretty -->
	<arg name="colors" />

	<!-- Lint everything please -->
	<file>./</file>

	<!-- Except these. See phpunit.xml's ignores -->
	<exclude-pattern>vendor/</exclude-pattern>
	<exclude-pattern>storage/</exclude-pattern>
	<exclude-pattern>bootstrap/cache/</exclude-pattern>
	<exclude-pattern>*.blade.php</exclude-pattern>

	<!-- Activate rules. Note this has to come before configuring them below -->
	<rule ref="Generic">
		<!-- There's a lot of contradictory rules, so we'll have to ignore a lot -->

		<!-- We want short (conflicts with DisallowLongArraySyntax) -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />

		<!-- While we'd like to format doc comments, we want to support single line type hints -->
		<!-- /** @var Type $foo */ -->
		<exclude name="Generic.Commenting.DocComment" />

		<!-- While evaluating a function every loop isn't the best, readability is king -->
		<exclude name="Generic.CodeAnalysis.ForLoopWithTestFunctionCall.NotAllowed" />

		<!-- We want classes opening brace to be on the next line -->
		<exclude name="Generic.Classes.OpeningBraceSameLine" />

		<!-- We want a newline at the end (conflicts with EndFileNewline) -->
		<exclude name="Generic.Files.EndFileNoNewline" />

		<!-- Files shouldn't be lowercased, they should be PascalCase -->
		<exclude name="Generic.Files.LowercasedFilename" />

		<!-- We don't want assignment aligned -->
		<exclude name="Generic.Formatting.MultipleStatementAlignment" />

		<!-- We do want spaces after casts (conflicts with SpaceAfterCast) -->
		<exclude name="Generic.Formatting.NoSpaceAfterCast" />

		<!-- We don't care about prefixing abstract classes with Abstract -->
		<exclude name="Generic.NamingConventions.AbstractClassNamePrefix" />

		<!-- We don't care about suffixing traits with Trait -->
		<exclude name="Generic.NamingConventions.TraitNameSuffix" />

		<!-- We don't want camel caps function names -->
		<exclude name="Generic.NamingConventions.CamelCapsFunctionName.ScopeNotCamelCaps" />

		<!-- In fact, you do NOT want to close the php tag -->
		<exclude name="Generic.PHP.ClosingPHPTag" />

		<!-- We want lowercase true/false/null (conflicts with LowerCaseConstant) -->
		<exclude name="Generic.PHP.UpperCaseConstant" />

		<!-- If strings have to be broken up over multiple lines, then allow it-->
		<exclude name="Generic.Strings.UnnecessaryStringConcat.Found" />

		<!-- Tabs are better than spaces (conflicts with DisallowSpaceIndent) -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent" />
	</rule>

	<!-- Now PEAR's rules -->
	<rule ref="PEAR">
		<!-- At first, I tried to fill in all the missing phpdocs, but I found pretty quickly -->
		<!-- that it was leading to redundent commenting that wasn't helping, so don't require it -->
		<exclude name="PEAR.Commenting.ClassComment.Missing" />
		<exclude name="PEAR.Commenting.FileComment" />
		<exclude name="PEAR.Commenting.FunctionComment.Missing" />
		<exclude name="PEAR.Commenting.FunctionComment.MissingParamTag" />
		<exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />

		<!-- We don't care about specifying @category/@package/@author/@license/@link -->
		<exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingLinkTag" />
		<exclude name="PEAR.Commenting.ClassComment.MissingPackageTag" />

		<!-- Parameters should be self commenting -->
		<exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />

		<!-- We don't want to align parameter comments -->
		<exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamType" />

		<!-- We prefer using `require` (errors) instead of `include` (warns) -->
		<exclude name="PEAR.Files.IncludingFile.UseInclude" />
		<exclude name="PEAR.Files.IncludingFile.UseIncludeOnce" />

		<!-- Bad for closures, we don't want the parentheses to start/end the line or require odd indentation -->
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent" />

		<!-- Bad for multiline params, we don't care if { is on the same line as ) -->
		<exclude name="PEAR.Functions.FunctionDeclaration.NewlineBeforeOpenBrace" />

		<!-- Privates shouldn't start with an underscore -->
		<exclude name="PEAR.NamingConventions.ValidVariableName.PrivateNoUnderscore" />
		<exclude name="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore" />

		<!-- The same as Generic.Sniffs.WhiteSpace.ScopeIndentSniff, but doesn't indent switch cases -->
		<exclude name="PEAR.WhiteSpace.ScopeIndent.IncorrectExact" />
	</rule>

	<rule ref="PSR1" />

	<rule ref="PSR2">
		<!-- We prefer `else if` over `elseif` -->
		<exclude name="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed" />

		<!-- A copy of this rule is in PEAR that we are ignoring -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace" />
	</rule>

	<rule ref="PSR12">
		<!-- We prefer `declare(strict_types=1);` to be on the same line as `<?php` -->
		<exclude name="PSR12.Files.FileHeader.IncorrectOrder" />
		<exclude name="PSR12.Files.FileHeader.SpacingAfterBlock" />
		<exclude name="PSR12.Files.OpenTag.NotAlone" />

		<!-- We don't want each trait to have its own use statement -->
		<exclude name="PSR12.Traits.UseDeclaration.MultipleImport" />
	</rule>

	<rule ref="Squiz">
		<!-- If it doesn't exceed line max, we prefer multiple arguments on the same line -->
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />

		<!-- If it doesn't exceed line max, we prefer multiple array values on the same line -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />

		<!-- We don't want to align multiline 'foo' => 'bar' -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />

		<!-- Allow @property (or any others) in class comment. ThatsThePoint.jpg -->
		<exclude name="Squiz.Commenting.ClassComment.TagNotAllowed" />

		<!-- I'm not a fan of trailing commas -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast" />
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoComma" />

		<!-- We want to do single line block comments if we want to annotate a function param -->
		<exclude name="Squiz.Commenting.BlockComment.SingleLine" />

		<!-- It's requiring some weird indentation on block comments that doesn't work for all -->
		<exclude name="Squiz.Commenting.BlockComment.FirstLineIndent" />
		<exclude name="Squiz.Commenting.BlockComment.LastLineIndent" />
		<exclude name="Squiz.Commenting.BlockComment.LineIndent" />
		<exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter" />

		<!-- We want to be able to do single line phpdoc typehints -->
		<exclude name="Squiz.Commenting.BlockComment.WrongStart" />
		<exclude name="Squiz.Commenting.BlockComment.WrongEnd" />
		<exclude name="Squiz.Commenting.InlineComment.DocBlock" />

		<!-- We don't need every Inline comment (//) to end exactly in a sentence -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />

		<!-- Gross. We don't want //end functionName() -->
		<exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing" />

		<!-- Again, we don't want to enforce phpdoc -->
		<exclude name="Squiz.Commenting.ClassComment.Missing" />
		<exclude name="Squiz.Commenting.FileComment.Missing" />
		<exclude name="Squiz.Commenting.FunctionComment.Missing" />
		<exclude name="Squiz.Commenting.VariableComment.Missing" />
		<exclude name="Squiz.Commenting.FunctionComment.MissingReturn" />

		<!-- And if we do phpdoc, we don't want to align params -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" />

		<!-- Neither do we want to require a comment as variable names should be self documenting -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment" />

		<!-- PHPDoc doesn't need a period at the end of the throw explaination -->
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop" />

		<!-- `//end for` is gross -->
		<exclude name="Squiz.Commenting.LongConditionClosingComment.Missing" />

		<!-- Unfortunately, the incorrect var type check requires integer over int, boolean over bool -->
		<exclude name="Squiz.Commenting.VariableComment.IncorrectVarType" />
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName" />

		<!-- We want to be able to annotate // @codeCoverageIgnore -->
		<exclude name="Squiz.Commenting.PostStatementComment.Found" />

		<!-- We don't need ternary to only be on one line -->
		<exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine" />
		<exclude name="Squiz.WhiteSpace.OperatorSpacing.SpacingAfter" />

		<!-- We want to enforce wrapping brackets around ternary -->
		<exclude name="Squiz.ControlStructures.InlineIfDeclaration.NoBrackets" />

		<!-- Leave break statements indented -->
		<exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent" />

		<!-- We don't want .inc extension for class phps -->
		<exclude name="Squiz.Files.FileExtension.ClassFound" />

		<!-- We don't want to force () around operations -->
		<exclude name="Squiz.Formatting.OperatorBracket.MissingBrackets" />

		<!-- Unfortunately, databases columns are snake instead of camel, so we have to ignore this -->
		<exclude name="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps" />

		<!-- We should be able to construct objects to pass into functions...  -->
		<exclude name="Squiz.Objects.ObjectInstantiation.NotAssigned" />

		<!-- No, if it's a bool, we don't want to `=== true` -->
		<exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue" />

		<!-- We like saving booleans -->
		<exclude name="Squiz.PHP.DisallowBooleanStatement.Found" />
		<exclude name="Squiz.PHP.DisallowComparisonAssignment.AssignedComparison" />

		<!-- We like ternary -->
		<exclude name="Squiz.PHP.DisallowInlineIf.Found" />

		<!-- We like heredoc/nowdoc -->
		<exclude name="Squiz.PHP.Heredoc.NotAllowed" />

		<!-- We actually do want spaces around concatenation operator -->
		<exclude name="Squiz.Strings.ConcatenationSpacing.PaddingFound" />

		<!-- We like string interpolation -->
		<exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar" />

		<!-- We don't need a ton of blank lines around stuff -->
		<exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterBreak" />
		<exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose" />
		<exclude name="Squiz.WhiteSpace.FunctionSpacing" />
		<exclude name="Squiz.WhiteSpace.MemberVarSpacing.FirstIncorrect" />
		<exclude name="Squiz.WhiteSpace.MemberVarSpacing.Incorrect" />

		<!-- Weird spacing requirement for multiline object construction -->
		<exclude name="Squiz.WhiteSpace.ObjectOperatorSpacing.Before" />
	</rule>

	<rule ref="Zend">
		<!-- We don't want underscores on private variables -->
		<exclude name="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore" />

		<!-- Unfortunately, databases columns are snake instead of camel, so we have to ignore this -->
		<exclude name="Zend.NamingConventions.ValidVariableName.NotCamelCaps" />
	</rule>

	<rule ref="PHPCompatibility" />

	<!-- And we want to configure some rules (but they can't be in the same rule blocks above) -->

	<!-- We want tabs, not spaces -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<!-- Although we prefer this to be exact, it can't handle mutiline sadly -->
			<property name="exact" value="false" />
			<property name="tabIndent" value="true" />
		</properties>
	</rule>

	<!-- LineLengths are too strict -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="160" />
			<property name="ignoreComments" value="true" />
			<property name="absoluteLineLimit" value="160" />
		</properties>
	</rule>

	<!-- We want no spaces after not's like !$someBool -->
	<rule ref="Generic.Formatting.SpaceAfterNot">
		<properties>
			<property name="spacing" value="0" />
		</properties>
	</rule>

	<!-- We want Closures to have same line brace, methods next line -->
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkFunctions" value="false" />
			<property name="checkClosures" value="true" />
		</properties>
	</rule>

	<!-- Migrations use a custom naming scheme for their file, so don't require filename/namespace  -->
	<rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
		<exclude-pattern>database/migrations/</exclude-pattern>
	</rule>
	<rule ref="Squiz.Classes.ClassFileName.NoMatch">
		<exclude-pattern>database/migrations/</exclude-pattern>
	</rule>
</ruleset>
